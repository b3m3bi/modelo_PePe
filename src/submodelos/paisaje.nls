globals [
  celdas_tierra                  ;; agentset (patches): celdas que representan la tierra
  celdas_mar                     ;; agentset (patches): celdas que representan el mar
  num_regiones                   ;; number: número de regiones en las que se dividen las celdas de mar
  
  celdas_r1                      ;; agentset (patches): celdas que forman parte de la región 1
  celdas_r2                      ;; agentset (patches): celdas que forman parte de la región 2
  celdas_r3                      ;; agentset (patches): celdas que forman parte de la región 3
]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; PROCEDIMIENTOS INICIALIZACION ;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to init_paisaje
  print "Inicializando el paisaje..." 
  ;; se crea la franja de tierra
  set celdas_tierra patches with [ pxcor > max-pxcor - LONG_TIERRA ]
  ask celdas_tierra [ set tipo "tierra" ]
  
  ;; se crea el mar en el resto de los parches 
  set celdas_mar patches with [ pxcor <= max-pxcor - LONG_TIERRA ]
  ask celdas_mar [ set tipo "mar" ]
  print "OK"
end

to init_regiones
  print "Inicializando regiones..."
  set num_regiones 3 
  
  let _long_regiones (list LONG_REGION_1 LONG_REGION_2 LONG_REGION_3)
  let pos_x max-pxcor - LONG_TIERRA
  
  (foreach _long_regiones (range 1 (num_regiones + 1)) [
    [l r] ->
    ask celdas_mar with [ pxcor <= pos_x and pxcor > pos_x - l ][ set num_region r ]
    set pos_x pos_x - l
    if pos_x + 1 < min-pxcor [ print "Advertencia: El tamaño del mundo es menor que el necesario para las longitudes de region dadas. Se completo solo con el espacio disponible." ]
  ])
  if pos_x >= min-pxcor [ print "Advertencia: El tamaño del mundo es mayor que el que suman las longitudes de region dadas. Quedaron celdas de mar sin región asignada." ] 
  
  set celdas_r1 celdas_mar with [ num_region = 1 ]
  set celdas_r2 celdas_mar with [ num_region = 2 ]
  set celdas_r3 celdas_mar with [ num_region = 3 ]

  print "OK"
end