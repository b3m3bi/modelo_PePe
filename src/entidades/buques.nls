breed [ buques buque ]

buques-own [
  mi_plataforma                  ;; agent (plataforma): plataforma en la que cargo
  mi_puerto                      ;; agent (puerto): puerto en el que descargo (el más cercano a mi plataforma)
  ruta_a_puerto                  ;; list (patches): lista de la ruta que debo seguir en un viaje desde la plataforma hacia el pueto
  ruta_a_plataforma              ;; list (patches): lista de la ruta que debo seguir en un viaje desde el puerto hacia la plataforma
  ruta                           ;; list (patches): lista de la ruta que debo seguir en un viaje dado
  carga                          ;; number: cuanta cantidad de producción de hidrocarburo transporto
  destino                        ;; agent (patch): sitio al que me dirijo
  indice_actual_ruta             ;; number: indice de la celda donde estoy en mi ruta
  tiempo_restante_iteracion      ;; number: tiempo que queda de la iteración
  estado                         ;; string: estado de actividad del buque ("moviendose" "cargando" "descargando")
  distancia_recorrida            ;; number: distancia que recorre el buque en un viaje (del puerto a la plataforma y de regreso al puerto)
  tiempo_carga                   ;; number: tiempo que lleva cargando el buque
  tiempo_descarga                ;; number: tiempo que lleva descargado el buque
  activo?
]

globals [
  tiempo_en_plataforma           ;; número de horas que un buque pasa en una plataforma
  tiempo_en_puerto               ;; número de horas que un buque pasa en un puerto
]

to init_buques
  print "Inicializando buques..."
  set tiempo_en_plataforma 3
  set tiempo_en_puerto 3
  
  ask plataformas [
    hatch-buques 1 [
      init_buque myself
    ]
  ]
  
  calcular_rutas_buques
  print "OK"
end

to init_buque [_plataforma]
  set shape "buque"
  set size 0.9
  set indice_actual_ruta 0
  set tiempo_restante_iteracion 0
  set mi_plataforma _plataforma
  set mi_puerto min-one-of puertos [ distance _plataforma ]
  set ruta_a_puerto []
  set ruta_a_plataforma []
  set destino [patch-here] of mi_puerto
  set ruta ruta_a_puerto
  set estado "cargando"
  set distancia_recorrida 0 
  set tiempo_carga 0
  set tiempo_descarga 0
  set activo? true
end

to calcular_rutas_buques
  actualizar_transitables_buques
  ask buques [
    set ruta_a_puerto obtener_ruta_A_star_buque [patch-here] of mi_plataforma [patch-here] of mi_puerto
    set ruta_a_plataforma obtener_ruta_A_star_buque [patch-here] of mi_puerto [patch-here] of mi_plataforma
  ]
end

to dinamica_iteracion_buque
  set tiempo_restante_iteracion horas_iteracion
  ejecutar_estado_buques    
end

to ejecutar_estado_buques
  if tiempo_restante_iteracion > 0 and activo? [
    (ifelse
      estado = "moviendose"  [ moverse_buque ]
      estado = "cargando"    [ cargando_buque ]
      estado = "descargando" [ descargando_buque ]
    )
    ejecutar_estado_buques
  ]
end

to moverse_buque
  ifelse patch-here = destino [
    ;; ya llegué a mi destino
    ifelse destino = [patch-here] of mi_puerto 
    [ set estado "descargando" ]
    [ set estado "cargando" ]
  ][

    let tamanio_paso VELOCIDAD_BUQUES / longitud_celda
    let distancia_avanzada 0

    while [ distancia_avanzada < tamanio_paso ] [
      let siguiente_celda (item indice_actual_ruta ruta)
      face siguiente_celda
      let distancia_avanzo min (list (tamanio_paso - distancia_avanzada) (distance siguiente_celda))
      jump distancia_avanzo

      set distancia_avanzada distancia_avanzada + distancia_avanzo

      ;; reviso si ya llegué al centro o no de la siguiente celda
      if distance siguiente_celda = 0 [
        ;; si ya llegué cambio de indice y registro la distancia recorrida
        set indice_actual_ruta indice_actual_ruta + 1

        ;; puede que llegue al destino y me hayan sobrado pasos, por lo que me detengo
        if patch-here = destino [ stop ]
      ]
    ]
    set tiempo_restante_iteracion tiempo_restante_iteracion - 1
    set distancia_recorrida distancia_recorrida + 1 
  ]
end

to cargando_buque
  set destino [patch-here] of mi_puerto
  set carga [stock] of mi_plataforma
  ask mi_plataforma [ set stock 0 ]
  set ruta ruta_a_puerto
  set indice_actual_ruta 0
  set tiempo_restante_iteracion tiempo_restante_iteracion - 1
  set estado "moviendose"
end

to descargando_buque 
  ;; se descarga la carga que trae el buque
  set produccion_dia_hidrocarburo produccion_dia_hidrocarburo + carga
  set produccion_mes_hidrocarburo produccion_mes_hidrocarburo + carga
  set produccion_total_hidrocarburo produccion_total_hidrocarburo + carga
  ;; se registra la distancia recorrida
  set distancia_recorrida_dia_hidrocarburo distancia_recorrida_dia_hidrocarburo + distancia_recorrida
  
  ;; se calcula la ganancia que genera la plataforma y se registra en la plataforma y registros globales
  let ganancia_por_carga obtener_balance_hidrocarburo_carga
  ask mi_plataforma [ 
    set ganancia_generada ganancia_por_carga
    set ganancia_mes_plataforma ganancia_mes_plataforma  + ganancia_por_carga
  ]
  set ganancia_dia_hidrocarburo ganancia_dia_hidrocarburo + ganancia_por_carga
  set ganancia_mes_hidrocarburo ganancia_mes_hidrocarburo + ganancia_por_carga
  
  ;; se inicializan las variables y se define nuevo destino para viaje de regreso
  set distancia_recorrida 0 
  set carga 0
  set destino [patch-here] of mi_plataforma
  set ruta ruta_a_plataforma
  set indice_actual_ruta 0
  set tiempo_restante_iteracion tiempo_restante_iteracion - 1
  set estado "moviendose"
  
  if not [activo?] of mi_plataforma [
    move-to mi_puerto 
    set heading 90
    fd 1
    set activo? false
  ]
  
end

to-report obtener_balance_hidrocarburo_carga
  let costos_transporte distancia_recorrida * COSTO_TRANSPORTE_POR_UNIDAD_DISTANCIA * longitud_celda
  let costos_mantenimiento _gasto_en_mantenimiento * 1000
  let ganancia_produccion (carga * PRECIO_CRUDO)
  report ganancia_produccion - costos_transporte - costos_mantenimiento
end
