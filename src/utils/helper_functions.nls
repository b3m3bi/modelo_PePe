patches-own [
  etiqueta
]

globals [
  etiquetas
]

to-report vecindad_moore [n incluir_centro?]
  let coor (range (- n) (n + 1))
  let vecindad []
  foreach coor [
    x -> foreach coor [
      y ->  set vecindad lput (list x y) vecindad
    ]
  ]
  ifelse incluir_centro?
  [ report vecindad ]
  [ report remove [0 0] vecindad ]
end

to-report vecindad_von_neumann [n incluir_centro?]
  let coor (range (- n) (n + 1))
  let vecindad []
  foreach coor [
    x -> foreach coor [
      y -> if abs x + abs y <= n [
        set vecindad lput (list x y) vecindad
      ]
    ]
  ]
  ifelse incluir_centro?
  [ report vecindad ]
  [ report remove [0 0] vecindad ]
end

to-report paso_un_dia
  report (ticks * horas_iteracion) mod 24  = 0
end

to-report paso_un_ano 
  report (time:get "dayofyear" fecha = 1)
;  (ticks != 0) and (dias mod 360 = 0)
end

to-report paso_un_mes
  report (time:get "day" fecha = 1)
;  report (ticks != 0) and (dias mod 30 = 0)
end

to-report obtener_indice_max [ lista ]
  let maximo max lista
  report position maximo lista
end


to formar_vecindades_zonas
  ask patches [ set num_zona -999 ]
  let num_grupo 0
  ask patches [
    if (zonificacion != "libre" and zonificacion != "NA" and num_zona = -999) [
      formar_vecindad_zona num_grupo
      set num_grupo num_grupo + 1
    ]
  ]
  set num_zonas max [ num_zona] of patches
end

to formar_vecindad_zona [ _num_zona ]
  set num_zona _num_zona
  ask neighbors4 with [ zonificacion = [zonificacion] of myself and num_zona = -999 ][
    formar_vecindad_zona _num_zona
  ]
end


to-report encontrar [x]
  let y x
  while [ (item y etiquetas) != y ][
    set y (item y etiquetas)
  ]
  while [ (item x etiquetas) != x ][
    let z (item x etiquetas)
    set etiquetas replace-item x etiquetas y
    set x z
  ]
  report y
end

to union [x y]
  set etiquetas replace-item (encontrar x) etiquetas (encontrar y)
end

to formar_componentes 
  let etiqueta_max 0
  set etiquetas range count patches 
  ask patches [ set etiqueta 0 ]
  
  foreach sort patches [
    p ->
    ask p [
      if zonificacion = "libre" or tipo = "puerto" [
        let atras patch-at-heading-and-distance 270 1
        let arriba patch-at-heading-and-distance 0 1
        (ifelse 
          (atras = nobody or [etiqueta] of atras = 0) and (arriba = nobody or [etiqueta] of arriba = 0) [
            set etiqueta_max etiqueta_max + 1
            set etiqueta etiqueta_max
          ]
          (atras != nobody and [etiqueta] of atras != 0) and (arriba = nobody or [etiqueta] of arriba = 0) [
            set etiqueta encontrar [etiqueta] of atras
          ]
          (atras = nobody or [etiqueta] of atras = 0) and (arriba != nobody and [etiqueta] of arriba != 0) [
            set etiqueta encontrar [etiqueta] of arriba
          ]
          [
            union [etiqueta] of atras [etiqueta] of arriba
            set etiqueta encontrar [etiqueta] of atras
          ]
        )
      ]
    ]
  ]
  foreach sort patches [
    p -> ask p [ set etiqueta encontrar etiqueta ]
  ]
end

to-report todos_los_sitios_son_accesibles?
  formar_componentes
  let celdas_navegables (patch-set celdas_libre [patch-here] of puertos)
  ifelse length remove-duplicates [etiqueta] of celdas_navegables = 1
  [ report true ]
  [ report false ]
end