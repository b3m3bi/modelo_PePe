to-report vecindad_moore [n incluir_centro?]
  let coor (range (- n) (n + 1))
  let vecindad []
  foreach coor [
    x -> foreach coor [
      y ->  set vecindad lput (list x y) vecindad
    ]
  ]
  ifelse incluir_centro?
  [ report vecindad ]
  [ report remove [0 0] vecindad ]
end

to-report vecindad_von_neumann [n incluir_centro?]
  let coor (range (- n) (n + 1))
  let vecindad []
  foreach coor [
    x -> foreach coor [
      y -> if abs x + abs y <= n [
        set vecindad lput (list x y) vecindad
      ]
    ]
  ]
  ifelse incluir_centro?
  [ report vecindad ]
  [ report remove [0 0] vecindad ]
end

to-report paso_un_dia
  report (ticks * horas_iteracion) mod 24  = 0
end

to-report paso_un_ano 
  report (time:get "dayofyear" fecha = 1)
;  (ticks != 0) and (dias mod 360 = 0)
end

to-report paso_un_mes
  report (time:get "day" fecha = 1)
;  report (ticks != 0) and (dias mod 30 = 0)
end

to-report obtener_indice_max [ lista ]
  let maximo max lista
  report position maximo lista
end


to formar_vecindades_zonas
  ask patches [ set num_zona -999 ]
  let num_grupo 0
  ask patches [
    if (zonificacion != "libre" and zonificacion != "NA" and num_zona = -999) [
      formar_vecindad_zona num_grupo
      set num_grupo num_grupo + 1
    ]
  ]
  set num_zonas max [ num_zona] of patches
end

to formar_vecindad_zona [ _num_zona ]
  set num_zona _num_zona
  ask neighbors4 with [ zonificacion = [zonificacion] of myself and num_zona = -999 ][
    formar_vecindad_zona _num_zona
  ]
end